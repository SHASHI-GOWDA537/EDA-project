{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94fd10d4-0614-4da8-8cba-73db916df150",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "EDA Project- Analysis of AMCAT Data\n",
    "Name: SHASHI GOWDA.R\n",
    "Intern ID: IN9240364\n",
    "Step 1 - Introduction:\n",
    "​The dataset provided by Aspiring Minds from the Aspiring Mind Employment Outcome 2015 (AMEO) focuses on the employment outcomes of engineering graduates. It comprises various attributes such as demographic features, academic scores, standardized test scores, and employment-related details like salary, job titles, and job locations.​\n",
    "\n",
    "Objective:\n",
    "The objective of this exploratory data analysis (EDA) is to gain insights into the factors influencing the salary of engineering graduates. By examining the relationships between different variables and the target variable (Salary), we aim to understand the dataset's characteristics, identify patterns, and uncover potential insights that could aid in decision-making processes related to employment and salary negotiation for engineering graduates.\n",
    "\n",
    "Step - 2 - Import the data and display the head, shape and description of the data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load the dataset\n",
    "path = \"C:/Users/hp/Downloads/data.xlsx - Sheet1.csv\"\n",
    "df = pd.read_csv(path)\n",
    "# Display the first few rows of the dataframe\n",
    "print(\"Head of the data:\")\n",
    "print(df.head())\n",
    "Head of the data:\n",
    "  Unnamed: 0      ID     Salary          DOJ          DOL  \\\n",
    "0      train  203097   420000.0  6/1/12 0:00      present   \n",
    "1      train  579905   500000.0  9/1/13 0:00      present   \n",
    "2      train  810601   325000.0  6/1/14 0:00      present   \n",
    "3      train  267447  1100000.0  7/1/11 0:00      present   \n",
    "4      train  343523   200000.0  3/1/14 0:00  3/1/15 0:00   \n",
    "\n",
    "                Designation    JobCity Gender           DOB  10percentage  \\\n",
    "0   senior quality engineer  Bangalore      f  2/19/90 0:00          84.3   \n",
    "1         assistant manager     Indore      m  10/4/89 0:00          85.4   \n",
    "2          systems engineer    Chennai      f   8/3/92 0:00          85.0   \n",
    "3  senior software engineer    Gurgaon      m  12/5/89 0:00          85.6   \n",
    "4                       get    Manesar      m  2/27/91 0:00          78.0   \n",
    "\n",
    "   ... ComputerScience  MechanicalEngg  ElectricalEngg TelecomEngg  CivilEngg  \\\n",
    "0  ...              -1              -1              -1          -1         -1   \n",
    "1  ...              -1              -1              -1          -1         -1   \n",
    "2  ...              -1              -1              -1          -1         -1   \n",
    "3  ...              -1              -1              -1          -1         -1   \n",
    "4  ...              -1              -1              -1          -1         -1   \n",
    "\n",
    "   conscientiousness agreeableness extraversion  nueroticism  \\\n",
    "0             0.9737        0.8128       0.5269      1.35490   \n",
    "1            -0.7335        0.3789       1.2396     -0.10760   \n",
    "2             0.2718        1.7109       0.1637     -0.86820   \n",
    "3             0.0464        0.3448      -0.3440     -0.40780   \n",
    "4            -0.8810       -0.2793      -1.0697      0.09163   \n",
    "\n",
    "   openess_to_experience  \n",
    "0                -0.4455  \n",
    "1                 0.8637  \n",
    "2                 0.6721  \n",
    "3                -0.9194  \n",
    "4                -0.1295  \n",
    "\n",
    "[5 rows x 39 columns]\n",
    "# Display the shape of the dataframe\n",
    "print(\"\\nShape of the data:\")\n",
    "print(df.shape)\n",
    "Shape of the data:\n",
    "(3998, 39)\n",
    "# Display the description of the data\n",
    "print(\"\\nDescription of the data:\")\n",
    "print(df.describe())\n",
    "Description of the data:\n",
    "                 ID        Salary  10percentage  12graduation  12percentage  \\\n",
    "count  3.998000e+03  3.998000e+03   3998.000000   3998.000000   3998.000000   \n",
    "mean   6.637945e+05  3.076998e+05     77.925443   2008.087544     74.466366   \n",
    "std    3.632182e+05  2.127375e+05      9.850162      1.653599     10.999933   \n",
    "min    1.124400e+04  3.500000e+04     43.000000   1995.000000     40.000000   \n",
    "25%    3.342842e+05  1.800000e+05     71.680000   2007.000000     66.000000   \n",
    "50%    6.396000e+05  3.000000e+05     79.150000   2008.000000     74.400000   \n",
    "75%    9.904800e+05  3.700000e+05     85.670000   2009.000000     82.600000   \n",
    "max    1.298275e+06  4.000000e+06     97.760000   2013.000000     98.700000   \n",
    "\n",
    "          CollegeID  CollegeTier   collegeGPA  CollegeCityID  CollegeCityTier  \\\n",
    "count   3998.000000  3998.000000  3998.000000    3998.000000      3998.000000   \n",
    "mean    5156.851426     1.925713    71.486171    5156.851426         0.300400   \n",
    "std     4802.261482     0.262270     8.167338    4802.261482         0.458489   \n",
    "min        2.000000     1.000000     6.450000       2.000000         0.000000   \n",
    "25%      494.000000     2.000000    66.407500     494.000000         0.000000   \n",
    "50%     3879.000000     2.000000    71.720000    3879.000000         0.000000   \n",
    "75%     8818.000000     2.000000    76.327500    8818.000000         1.000000   \n",
    "max    18409.000000     2.000000    99.930000   18409.000000         1.000000   \n",
    "\n",
    "       ...  ComputerScience  MechanicalEngg  ElectricalEngg  TelecomEngg  \\\n",
    "count  ...      3998.000000     3998.000000     3998.000000  3998.000000   \n",
    "mean   ...        90.742371       22.974737       16.478739    31.851176   \n",
    "std    ...       175.273083       98.123311       87.585634   104.852845   \n",
    "min    ...        -1.000000       -1.000000       -1.000000    -1.000000   \n",
    "25%    ...        -1.000000       -1.000000       -1.000000    -1.000000   \n",
    "50%    ...        -1.000000       -1.000000       -1.000000    -1.000000   \n",
    "75%    ...        -1.000000       -1.000000       -1.000000    -1.000000   \n",
    "max    ...       715.000000      623.000000      676.000000   548.000000   \n",
    "\n",
    "         CivilEngg  conscientiousness  agreeableness  extraversion  \\\n",
    "count  3998.000000        3998.000000    3998.000000   3998.000000   \n",
    "mean      2.683842          -0.037831       0.146496      0.002763   \n",
    "std      36.658505           1.028666       0.941782      0.951471   \n",
    "min      -1.000000          -4.126700      -5.781600     -4.600900   \n",
    "25%      -1.000000          -0.713525      -0.287100     -0.604800   \n",
    "50%      -1.000000           0.046400       0.212400      0.091400   \n",
    "75%      -1.000000           0.702700       0.812800      0.672000   \n",
    "max     516.000000           1.995300       1.904800      2.535400   \n",
    "\n",
    "       nueroticism  openess_to_experience  \n",
    "count  3998.000000            3998.000000  \n",
    "mean     -0.169033              -0.138110  \n",
    "std       1.007580               1.008075  \n",
    "min      -2.643000              -7.375700  \n",
    "25%      -0.868200              -0.669200  \n",
    "50%      -0.234400              -0.094300  \n",
    "75%       0.526200               0.502400  \n",
    "max       3.352500               1.822400  \n",
    "\n",
    "[8 rows x 27 columns]\n",
    "df.isnull().sum()\n",
    "Unnamed: 0               0\n",
    "ID                       0\n",
    "Salary                   0\n",
    "DOJ                      0\n",
    "DOL                      0\n",
    "Designation              0\n",
    "JobCity                  0\n",
    "Gender                   0\n",
    "DOB                      0\n",
    "10percentage             0\n",
    "10board                  0\n",
    "12graduation             0\n",
    "12percentage             0\n",
    "12board                  0\n",
    "CollegeID                0\n",
    "CollegeTier              0\n",
    "Degree                   0\n",
    "Specialization           0\n",
    "collegeGPA               0\n",
    "CollegeCityID            0\n",
    "CollegeCityTier          0\n",
    "CollegeState             0\n",
    "GraduationYear           0\n",
    "English                  0\n",
    "Logical                  0\n",
    "Quant                    0\n",
    "Domain                   0\n",
    "ComputerProgramming      0\n",
    "ElectronicsAndSemicon    0\n",
    "ComputerScience          0\n",
    "MechanicalEngg           0\n",
    "ElectricalEngg           0\n",
    "TelecomEngg              0\n",
    "CivilEngg                0\n",
    "conscientiousness        0\n",
    "agreeableness            0\n",
    "extraversion             0\n",
    "nueroticism              0\n",
    "openess_to_experience    0\n",
    "dtype: int64\n",
    "df.duplicated().sum()\n",
    "0\n",
    "df.info()\n",
    "<class 'pandas.core.frame.DataFrame'>\n",
    "RangeIndex: 3998 entries, 0 to 3997\n",
    "Data columns (total 39 columns):\n",
    " #   Column                 Non-Null Count  Dtype  \n",
    "---  ------                 --------------  -----  \n",
    " 0   Unnamed: 0             3998 non-null   object \n",
    " 1   ID                     3998 non-null   int64  \n",
    " 2   Salary                 3998 non-null   float64\n",
    " 3   DOJ                    3998 non-null   object \n",
    " 4   DOL                    3998 non-null   object \n",
    " 5   Designation            3998 non-null   object \n",
    " 6   JobCity                3998 non-null   object \n",
    " 7   Gender                 3998 non-null   object \n",
    " 8   DOB                    3998 non-null   object \n",
    " 9   10percentage           3998 non-null   float64\n",
    " 10  10board                3998 non-null   object \n",
    " 11  12graduation           3998 non-null   int64  \n",
    " 12  12percentage           3998 non-null   float64\n",
    " 13  12board                3998 non-null   object \n",
    " 14  CollegeID              3998 non-null   int64  \n",
    " 15  CollegeTier            3998 non-null   int64  \n",
    " 16  Degree                 3998 non-null   object \n",
    " 17  Specialization         3998 non-null   object \n",
    " 18  collegeGPA             3998 non-null   float64\n",
    " 19  CollegeCityID          3998 non-null   int64  \n",
    " 20  CollegeCityTier        3998 non-null   int64  \n",
    " 21  CollegeState           3998 non-null   object \n",
    " 22  GraduationYear         3998 non-null   int64  \n",
    " 23  English                3998 non-null   int64  \n",
    " 24  Logical                3998 non-null   int64  \n",
    " 25  Quant                  3998 non-null   int64  \n",
    " 26  Domain                 3998 non-null   float64\n",
    " 27  ComputerProgramming    3998 non-null   int64  \n",
    " 28  ElectronicsAndSemicon  3998 non-null   int64  \n",
    " 29  ComputerScience        3998 non-null   int64  \n",
    " 30  MechanicalEngg         3998 non-null   int64  \n",
    " 31  ElectricalEngg         3998 non-null   int64  \n",
    " 32  TelecomEngg            3998 non-null   int64  \n",
    " 33  CivilEngg              3998 non-null   int64  \n",
    " 34  conscientiousness      3998 non-null   float64\n",
    " 35  agreeableness          3998 non-null   float64\n",
    " 36  extraversion           3998 non-null   float64\n",
    " 37  nueroticism            3998 non-null   float64\n",
    " 38  openess_to_experience  3998 non-null   float64\n",
    "dtypes: float64(10), int64(17), object(12)\n",
    "memory usage: 1.2+ MB\n",
    "df.columns()\n",
    "Index(['Unnamed: 0', 'ID', 'Salary', 'DOJ', 'DOL', 'Designation', 'JobCity',\n",
    "       'Gender', 'DOB', '10percentage', '10board', '12graduation',\n",
    "       '12percentage', '12board', 'CollegeID', 'CollegeTier', 'Degree',\n",
    "       'Specialization', 'collegeGPA', 'CollegeCityID', 'CollegeCityTier',\n",
    "       'CollegeState', 'GraduationYear', 'English', 'Logical', 'Quant',\n",
    "       'Domain', 'ComputerProgramming', 'ElectronicsAndSemicon',\n",
    "       'ComputerScience', 'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg',\n",
    "       'CivilEngg', 'conscientiousness', 'agreeableness', 'extraversion',\n",
    "       'nueroticism', 'openess_to_experience'],\n",
    "      dtype='object')\n",
    "df.nunique()\n",
    "Unnamed: 0                  1\n",
    "ID                       3998\n",
    "Salary                    177\n",
    "DOJ                        81\n",
    "DOL                        67\n",
    "Designation               419\n",
    "JobCity                   339\n",
    "Gender                      2\n",
    "DOB                      1872\n",
    "10percentage              851\n",
    "10board                   275\n",
    "12graduation               16\n",
    "12percentage              801\n",
    "12board                   340\n",
    "CollegeID                1350\n",
    "CollegeTier                 2\n",
    "Degree                      4\n",
    "Specialization             46\n",
    "collegeGPA               1282\n",
    "CollegeCityID            1350\n",
    "CollegeCityTier             2\n",
    "CollegeState               26\n",
    "GraduationYear             11\n",
    "English                   111\n",
    "Logical                   107\n",
    "Quant                     138\n",
    "Domain                    243\n",
    "ComputerProgramming        79\n",
    "ElectronicsAndSemicon      29\n",
    "ComputerScience            20\n",
    "MechanicalEngg             42\n",
    "ElectricalEngg             31\n",
    "TelecomEngg                26\n",
    "CivilEngg                  23\n",
    "conscientiousness         141\n",
    "agreeableness             149\n",
    "extraversion              154\n",
    "nueroticism               217\n",
    "openess_to_experience     142\n",
    "dtype: int64\n",
    "df = df.drop(columns = ['Unnamed: 0', 'ID','CollegeID','CollegeCityID'])\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tComputerScience\tMechanicalEngg\tElectricalEngg\tTelecomEngg\tCivilEngg\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t6/1/12 0:00\tpresent\tsenior quality engineer\tBangalore\tf\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t9/1/13 0:00\tpresent\tassistant manager\tIndore\tm\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t6/1/14 0:00\tpresent\tsystems engineer\tChennai\tf\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t-1\t-1\t-1\t-1\t-1\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t7/1/11 0:00\tpresent\tsenior software engineer\tGurgaon\tm\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t3/1/14 0:00\t3/1/15 0:00\tget\tManesar\tm\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t-1\t-1\t-1\t-1\t-1\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 35 columns\n",
    "\n",
    "# Conversion of DOJ and DOL datatype to datetime\n",
    "df['DOL'].replace('present','2015-12-31', inplace = True)\n",
    "df['DOL'] = pd.to_datetime(df['DOL'])\n",
    "df['DOJ'] = pd.to_datetime(df['DOJ'])\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tComputerScience\tMechanicalEngg\tElectricalEngg\tTelecomEngg\tCivilEngg\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tf\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tm\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tf\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t-1\t-1\t-1\t-1\t-1\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tm\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tm\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t-1\t-1\t-1\t-1\t-1\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 35 columns\n",
    "\n",
    "categorical = ['Designation','JobCity',\n",
    "'Gender','10board','12board','CollegeTier','Degree',\n",
    "\n",
    "'Specialization','CollegeCityTier','CollegeState']\n",
    "\n",
    "for cat in categorical:\n",
    " df[cat] = df[cat].astype('category')\n",
    "df.dtypes\n",
    "Salary                          float64\n",
    "DOJ                      datetime64[ns]\n",
    "DOL                      datetime64[ns]\n",
    "Designation                    category\n",
    "JobCity                        category\n",
    "Gender                         category\n",
    "DOB                              object\n",
    "10percentage                    float64\n",
    "10board                        category\n",
    "12graduation                      int64\n",
    "12percentage                    float64\n",
    "12board                        category\n",
    "CollegeTier                    category\n",
    "Degree                         category\n",
    "Specialization                 category\n",
    "collegeGPA                      float64\n",
    "CollegeCityTier                category\n",
    "CollegeState                   category\n",
    "GraduationYear                    int64\n",
    "English                           int64\n",
    "Logical                           int64\n",
    "Quant                             int64\n",
    "Domain                          float64\n",
    "ComputerProgramming               int64\n",
    "ElectronicsAndSemicon             int64\n",
    "ComputerScience                   int64\n",
    "MechanicalEngg                    int64\n",
    "ElectricalEngg                    int64\n",
    "TelecomEngg                       int64\n",
    "CivilEngg                         int64\n",
    "conscientiousness               float64\n",
    "agreeableness                   float64\n",
    "extraversion                    float64\n",
    "nueroticism                     float64\n",
    "openess_to_experience           float64\n",
    "dtype: object\n",
    "# Verifying whether the date of leaving (DOL) exceeds the date of joining (DOJ).\n",
    "dates = df[(df['DOL'] < df['DOJ'])].shape[0]\n",
    "print(f'DOL is earlier than DOJ for {dates} observations.')\n",
    "print(df.shape)\n",
    "DOL is earlier than DOJ for 40 observations.\n",
    "(3998, 35)\n",
    "df = df.drop(df[~(df['DOL'] > df['DOJ'])].index)\n",
    "print(df.shape)\n",
    "(3943, 35)\n",
    "# Making the gender column entries more detailed\n",
    "df['Gender'].replace({'f':'Female','m':'Male'}, inplace = True)\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tComputerScience\tMechanicalEngg\tElectricalEngg\tTelecomEngg\tCivilEngg\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t-1\t-1\t-1\t-1\t-1\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t-1\t-1\t-1\t-1\t-1\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 35 columns\n",
    "\n",
    "#Verifying that the results are expressed as percentages rather than CGPA or another format.\n",
    "print((df['10percentage'] <=10).sum())\n",
    "print((df['12percentage'] <=10).sum())\n",
    "print((df['collegeGPA'] <=10).sum())\n",
    "0\n",
    "0\n",
    "12\n",
    "df.loc[df['collegeGPA']<=10,'collegeGPA'].index\n",
    "df.loc[df['collegeGPA']<=10,'collegeGPA'] = (df.\n",
    "loc[df['collegeGPA']<=10,'collegeGPA']/10)*100\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tComputerScience\tMechanicalEngg\tElectricalEngg\tTelecomEngg\tCivilEngg\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t-1\t-1\t-1\t-1\t-1\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t-1\t-1\t-1\t-1\t-1\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t-1\t-1\t-1\t-1\t-1\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 35 columns\n",
    "\n",
    "# Checking if there exist 0 or -1 in the data\n",
    "print((df==0).sum()[(df==0).sum() > 0])\n",
    "CollegeCityTier    2761\n",
    "GraduationYear        1\n",
    "dtype: int64\n",
    "(df==-1).sum()[(df==-1).sum()>0]/len(df)*100\n",
    "Domain                    6.137459\n",
    "ComputerProgramming      21.836165\n",
    "ElectronicsAndSemicon    71.392341\n",
    "ComputerScience          77.605884\n",
    "MechanicalEngg           94.040071\n",
    "ElectricalEngg           96.094344\n",
    "TelecomEngg              90.565559\n",
    "CivilEngg                98.934821\n",
    "dtype: float64\n",
    "df = df.drop(columns = ['MechanicalEngg', 'ElectricalEngg', 'TelecomEngg',\n",
    "'CivilEngg'])\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tQuant\tDomain\tComputerProgramming\tElectronicsAndSemicon\tComputerScience\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t525\t0.635979\t445\t-1\t-1\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t780\t0.960603\t-1\t466\t-1\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t370\t0.450877\t395\t-1\t-1\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t625\t0.974396\t615\t-1\t-1\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t465\t0.124502\t-1\t233\t-1\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 31 columns\n",
    "\n",
    "df['10board'] = df['10board'].astype(str)\n",
    "df['12board'] = df['12board'].astype(str)\n",
    "df['JobCity'] = df['JobCity'].astype(str)\n",
    "df['10board'] = df['10board'].replace({'0':np.nan})\n",
    "df['12board'] = df['12board'].replace({'0':np.nan})\n",
    "df['GraduationYear'] = df['GraduationYear'].replace({0:np.nan})\n",
    "df['JobCity'] = df['JobCity'].replace({'-1':np.nan})\n",
    "df['Domain'] = df['Domain'].replace({-1:np.nan})\n",
    "df['ElectronicsAndSemicon'] = df['ElectronicsAndSemicon'].replace({-1:0})\n",
    "df['ComputerScience'] = df['ComputerScience'].replace({-1:0})\n",
    "df['ComputerProgramming'] = df['ComputerProgramming'].replace({-1:np.nan})\n",
    "df['10board'] = df['10board'].astype('category')\n",
    "df['12board'] = df['12board'].astype('category')\n",
    "df['JobCity'] = df['JobCity'].astype('category')\n",
    "df\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tQuant\tDomain\tComputerProgramming\tElectronicsAndSemicon\tComputerScience\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.30\tboard ofsecondary education,ap\t2007\t...\t525\t0.635979\t445.0\t0\t0\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.40\tcbse\t2007\t...\t780\t0.960603\tNaN\t466\t0\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.00\tcbse\t2010\t...\t370\t0.450877\t395.0\t0\t0\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.60\tcbse\t2007\t...\t625\t0.974396\t615.0\t0\t0\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.00\tcbse\t2008\t...\t465\t0.124502\tNaN\t233\t0\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\n",
    "3992\t800000.0\t2014-04-01\t2015-04-01\tmanager\tRajkot\tMale\t6/22/90 0:00\t73.00\tNaN\t2008\t...\t525\t0.938588\tNaN\t0\t0\t0.3555\t-0.9033\t0.9623\t0.64983\t-0.4229\n",
    "3993\t280000.0\t2011-10-01\t2012-10-01\tsoftware engineer\tNew Delhi\tMale\t4/15/87 0:00\t52.09\tcbse\t2006\t...\t475\t0.276047\t345.0\t0\t0\t-0.1082\t0.3448\t0.2366\t0.64980\t-0.9194\n",
    "3995\t320000.0\t2013-07-01\t2015-12-31\tassociate software engineer\tBangalore\tMale\t7/3/91 0:00\t81.86\tbse,odisha\t2008\t...\t465\t0.488348\t405.0\t0\t0\t-1.5765\t-1.5273\t-1.5051\t-1.31840\t-0.7615\n",
    "3996\t200000.0\t2014-07-01\t2015-01-01\tsoftware developer\tAsifabadbanglore\tFemale\t3/20/92 0:00\t78.72\tstate board\t2010\t...\t320\t0.744758\t445.0\t0\t438\t-0.1590\t0.0459\t-0.4511\t-0.36120\t-0.0943\n",
    "3997\t400000.0\t2013-02-01\t2015-12-31\tsenior systems engineer\tChennai\tFemale\t2/26/91 0:00\t70.60\tcbse\t2008\t...\t464\t0.600057\t435.0\t0\t0\t-1.1128\t-0.2793\t-0.6343\t1.32553\t-0.6035\n",
    "3943 rows × 31 columns\n",
    "\n",
    "# putting the mode values of each category column into the appropriate imputing columns.\n",
    "df['10board'].fillna(df['10board'].mode()[0], inplace = True)\n",
    "df['12board'].fillna(df['12board'].mode()[0], inplace = True)\n",
    "df['GraduationYear'].fillna(df['GraduationYear'].mode()[0], inplace = True)\n",
    "df['JobCity'].fillna(df['JobCity'].mode()[0], inplace = True)\n",
    "df\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tQuant\tDomain\tComputerProgramming\tElectronicsAndSemicon\tComputerScience\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.30\tboard ofsecondary education,ap\t2007\t...\t525\t0.635979\t445.0\t0\t0\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.40\tcbse\t2007\t...\t780\t0.960603\tNaN\t466\t0\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.00\tcbse\t2010\t...\t370\t0.450877\t395.0\t0\t0\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.60\tcbse\t2007\t...\t625\t0.974396\t615.0\t0\t0\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.00\tcbse\t2008\t...\t465\t0.124502\tNaN\t233\t0\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\t...\n",
    "3992\t800000.0\t2014-04-01\t2015-04-01\tmanager\tRajkot\tMale\t6/22/90 0:00\t73.00\tcbse\t2008\t...\t525\t0.938588\tNaN\t0\t0\t0.3555\t-0.9033\t0.9623\t0.64983\t-0.4229\n",
    "3993\t280000.0\t2011-10-01\t2012-10-01\tsoftware engineer\tNew Delhi\tMale\t4/15/87 0:00\t52.09\tcbse\t2006\t...\t475\t0.276047\t345.0\t0\t0\t-0.1082\t0.3448\t0.2366\t0.64980\t-0.9194\n",
    "3995\t320000.0\t2013-07-01\t2015-12-31\tassociate software engineer\tBangalore\tMale\t7/3/91 0:00\t81.86\tbse,odisha\t2008\t...\t465\t0.488348\t405.0\t0\t0\t-1.5765\t-1.5273\t-1.5051\t-1.31840\t-0.7615\n",
    "3996\t200000.0\t2014-07-01\t2015-01-01\tsoftware developer\tAsifabadbanglore\tFemale\t3/20/92 0:00\t78.72\tstate board\t2010\t...\t320\t0.744758\t445.0\t0\t438\t-0.1590\t0.0459\t-0.4511\t-0.36120\t-0.0943\n",
    "3997\t400000.0\t2013-02-01\t2015-12-31\tsenior systems engineer\tChennai\tFemale\t2/26/91 0:00\t70.60\tcbse\t2008\t...\t464\t0.600057\t435.0\t0\t0\t-1.1128\t-0.2793\t-0.6343\t1.32553\t-0.6035\n",
    "3943 rows × 31 columns\n",
    "\n",
    "#putting the median values of each numerical column into the appropriate imputing columns.\n",
    "df['Domain'].fillna(df['Domain'].median(), inplace = True)\n",
    "df['ComputerProgramming'].fillna(df['ComputerProgramming'].median(), inplace\n",
    "= True)\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tQuant\tDomain\tComputerProgramming\tElectronicsAndSemicon\tComputerScience\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tsenior quality engineer\tBangalore\tFemale\t2/19/90 0:00\t84.3\tboard ofsecondary education,ap\t2007\t...\t525\t0.635979\t445.0\t0\t0\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tassistant manager\tIndore\tMale\t10/4/89 0:00\t85.4\tcbse\t2007\t...\t780\t0.960603\t455.0\t466\t0\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tChennai\tFemale\t8/3/92 0:00\t85.0\tcbse\t2010\t...\t370\t0.450877\t395.0\t0\t0\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tGurgaon\tMale\t12/5/89 0:00\t85.6\tcbse\t2007\t...\t625\t0.974396\t615.0\t0\t0\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tget\tManesar\tMale\t2/27/91 0:00\t78.0\tcbse\t2008\t...\t465\t0.124502\t455.0\t233\t0\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\n",
    "5 rows × 31 columns\n",
    "\n",
    "# Cleaning text data in columns\n",
    "def cleaning_text_data(data):\n",
    "    \n",
    "# Convert the textual categories to lower case and remove the leading or trailing spaces if any.\n",
    "  df[data] = df[data].str.lower().str.strip()\n",
    "textual_columns =['Designation','JobCity','10board','12board','Specialization','CollegeState']\n",
    "for col in textual_columns:\n",
    "    print(f'No. of unique values in {col} with inconsistency : {df[col].nunique()}')\n",
    "No. of unique values in Designation with inconsistency : 416\n",
    "No. of unique values in JobCity with inconsistency : 337\n",
    "No. of unique values in 10board with inconsistency : 274\n",
    "No. of unique values in 12board with inconsistency : 339\n",
    "No. of unique values in Specialization with inconsistency : 46\n",
    "No. of unique values in CollegeState with inconsistency : 26\n",
    "for col in textual_columns:\n",
    " cleaning_text_data(col)\n",
    "for col in textual_columns:\n",
    "    print(f'No. of unique values in {col} without inconsistency : {df[col].nunique()}')\n",
    "No. of unique values in Designation without inconsistency : 416\n",
    "No. of unique values in JobCity without inconsistency : 230\n",
    "No. of unique values in 10board without inconsistency : 272\n",
    "No. of unique values in 12board without inconsistency : 336\n",
    "No. of unique values in Specialization without inconsistency : 46\n",
    "No. of unique values in CollegeState without inconsistency : 26\n",
    "# Selecting the top ten most frequently occurring categories and labeling the rest as other.\n",
    "def collapsing_categories(df, data):\n",
    "    for Designation in df[data].unique():\n",
    "        min_count = df[data].value_counts()[:10].min()\n",
    "        if df[df[data] == Designation][data].value_counts()[0] < min_count:\n",
    "            df.loc[df[data] == Designation, data] = 'other'\n",
    "for cols in textual_columns:\n",
    " collapsing_categories(df, cols)\n",
    "for cols in textual_columns:\n",
    "    print('')\n",
    "    print('Top 10 categories in:', cols)\n",
    "    print('')\n",
    "    print(df[cols].value_counts())\n",
    "    print('')\n",
    "    print('*'*100)\n",
    "Top 10 categories in: Designation\n",
    "\n",
    "other                         2259\n",
    "software engineer              535\n",
    "software developer             262\n",
    "system engineer                202\n",
    "programmer analyst             139\n",
    "systems engineer               117\n",
    "java software engineer         109\n",
    "software test engineer         100\n",
    "project engineer                76\n",
    "technical support engineer      73\n",
    "senior software engineer        71\n",
    "Name: Designation, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "\n",
    "Top 10 categories in: JobCity\n",
    "\n",
    "bangalore    1109\n",
    "other         807\n",
    "noida         382\n",
    "hyderabad     361\n",
    "pune          322\n",
    "chennai       310\n",
    "gurgaon       212\n",
    "new delhi     203\n",
    "mumbai        119\n",
    "kolkata       118\n",
    "Name: JobCity, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "\n",
    "Top 10 categories in: 10board\n",
    "\n",
    "cbse                            1726\n",
    "state board                     1140\n",
    "other                            498\n",
    "icse                             276\n",
    "ssc                              121\n",
    "up board                          85\n",
    "matriculation                     38\n",
    "rbse                              21\n",
    "board of secondary education      20\n",
    "up                                18\n",
    "Name: 10board, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "\n",
    "Top 10 categories in: 12board\n",
    "\n",
    "cbse                               1737\n",
    "state board                        1229\n",
    "other                               595\n",
    "icse                                128\n",
    "up board                             87\n",
    "isc                                  45\n",
    "board of intermediate                38\n",
    "board of intermediate education      31\n",
    "up                                   19\n",
    "mp board                             17\n",
    "rbse                                 17\n",
    "Name: 12board, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "\n",
    "Top 10 categories in: Specialization\n",
    "\n",
    "electronics and communication engineering    865\n",
    "computer science & engineering               731\n",
    "information technology                       654\n",
    "computer engineering                         593\n",
    "other                                        268\n",
    "computer application                         241\n",
    "mechanical engineering                       201\n",
    "electronics and electrical engineering       191\n",
    "electronics & telecommunications             120\n",
    "electrical engineering                        79\n",
    "Name: Specialization, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "\n",
    "Top 10 categories in: CollegeState\n",
    "\n",
    "uttar pradesh     902\n",
    "other             772\n",
    "karnataka         369\n",
    "tamil nadu        363\n",
    "telangana         312\n",
    "maharashtra       257\n",
    "andhra pradesh    222\n",
    "west bengal       192\n",
    "madhya pradesh    189\n",
    "punjab            188\n",
    "haryana           177\n",
    "Name: CollegeState, dtype: int64\n",
    "\n",
    "****************************************************************************************************\n",
    "# We add an age column by deducting the DOB year from 2015 because the dataset was released in that year. The age as of 2015 will now be added.\n",
    "df['DOB'] = pd.to_datetime(df['DOB'])\n",
    "df['Age'] = 2015 - df['DOB'].dt.year\n",
    "df.head()\n",
    "Salary\tDOJ\tDOL\tDesignation\tJobCity\tGender\tDOB\t10percentage\t10board\t12graduation\t...\tDomain\tComputerProgramming\tElectronicsAndSemicon\tComputerScience\tconscientiousness\tagreeableness\textraversion\tnueroticism\topeness_to_experience\tAge\n",
    "0\t420000.0\t2012-06-01\t2015-12-31\tother\tbangalore\tFemale\t1990-02-19\t84.3\tother\t2007\t...\t0.635979\t445.0\t0\t0\t0.9737\t0.8128\t0.5269\t1.35490\t-0.4455\t25\n",
    "1\t500000.0\t2013-09-01\t2015-12-31\tother\tother\tMale\t1989-10-04\t85.4\tcbse\t2007\t...\t0.960603\t455.0\t466\t0\t-0.7335\t0.3789\t1.2396\t-0.10760\t0.8637\t26\n",
    "2\t325000.0\t2014-06-01\t2015-12-31\tsystems engineer\tchennai\tFemale\t1992-08-03\t85.0\tcbse\t2010\t...\t0.450877\t395.0\t0\t0\t0.2718\t1.7109\t0.1637\t-0.86820\t0.6721\t23\n",
    "3\t1100000.0\t2011-07-01\t2015-12-31\tsenior software engineer\tgurgaon\tMale\t1989-12-05\t85.6\tcbse\t2007\t...\t0.974396\t615.0\t0\t0\t0.0464\t0.3448\t-0.3440\t-0.40780\t-0.9194\t26\n",
    "4\t200000.0\t2014-03-01\t2015-03-01\tother\tother\tMale\t1991-02-27\t78.0\tcbse\t2008\t...\t0.124502\t455.0\t233\t0\t-0.8810\t-0.2793\t-1.0697\t0.09163\t-0.1295\t24\n",
    "5 rows × 32 columns\n",
    "\n",
    "# removing the DOL from the DOJ and adding a tenure column\n",
    "delta = (df['DOL'] - df['DOJ'])\n",
    "tenure = np.zeros(len(df))\n",
    "\n",
    "for i, date in enumerate(delta):\n",
    "    tenure[i] = round(date.days/365, 2)\n",
    "\n",
    "df['Tenure'] = tenure\n",
    "# Removing the rows where the joining date and the graduation year are the same or greater\n",
    "len(df[(df['GraduationYear'] > df['DOJ'].dt.year)].index)\n",
    "79\n",
    "df = df.drop(df[(df['GraduationYear'] > df['DOJ'].dt.year)].index)\n",
    "# Function to calculate CDF\n",
    "def cdf(data):\n",
    "    x = np.sort(data)\n",
    "    y = np.arange(1, len(x)+1)/len(x)\n",
    "    return x, y\n",
    "Step - 3 - Univariate Analysis -> PDF, Histograms, Boxplots, Countplots, etc.\n",
    ".\n",
    "\n",
    "1) Find and remove the outliers in each numerical column\n",
    "def outlier_treatment(datacolumn):\n",
    "\n",
    " sorted(datacolumn)\n",
    " Q1,Q3 = np.percentile(datacolumn , [25,75])\n",
    " IQR = Q3 - Q1\n",
    " lower_range = Q1 - (1.5 * IQR)\n",
    " upper_range = Q3 + (1.5 * IQR)\n",
    " return lower_range,upper_range\n",
    " df.columns\n",
    "Index(['Salary', 'DOJ', 'DOL', 'Designation', 'JobCity', 'Gender', 'DOB',\n",
    "       '10percentage', '10board', '12graduation', '12percentage', '12board',\n",
    "       'CollegeTier', 'Degree', 'Specialization', 'collegeGPA',\n",
    "       'CollegeCityTier', 'CollegeState', 'GraduationYear', 'English',\n",
    "       'Logical', 'Quant', 'Domain', 'ComputerProgramming',\n",
    "       'ElectronicsAndSemicon', 'ComputerScience', 'conscientiousness',\n",
    "       'agreeableness', 'extraversion', 'nueroticism', 'openess_to_experience',\n",
    "       'Age', 'Tenure'],\n",
    "      dtype='object')\n",
    "columns = ['Salary','10percentage','12percentage','English',\n",
    "'Logical','Quant','Domain', 'ComputerProgramming',\n",
    "'ElectronicsAndSemicon', 'ComputerScience', 'conscientiousness', 'agreeableness', 'extraversion', 'nueroticism', 'openess_to_experience',\n",
    "'Age', 'Tenure']\n",
    "df1 = df.copy()\n",
    "for cols in columns:\n",
    "\n",
    " lowerbound, upperbound = outlier_treatment(df1[cols])\n",
    " df1 = df1.drop(df1[(df1[cols] < lowerbound) | (df1[cols] > upperbound)].index)\n",
    "print(f'No. of observations with outliers: {df.shape[0]}')\n",
    "print(f'No. of observations without outliers: {df1.shape[0]}')\n",
    "No. of observations with outliers: 3864\n",
    "No. of observations without outliers: 2490\n",
    "Univariate visual analysis for all the categorical columns\n",
    "# Designation\n",
    "df['Designation'].value_counts()[1:].sort_values(\n",
    "\n",
    "ascending=True\n",
    ").plot(\n",
    "kind='barh',\n",
    "title='Designation Counts',\n",
    "figsize=(10, 5),\n",
    "ec='k'\n",
    ")\n",
    "plt.ylabel('Designation')\n",
    "plt.xlabel('Count')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: The most popular designation is \"software engineer,\" which is followed by \"system engineer\" and \"software developer.\"\n",
    "# Job City\n",
    "df['JobCity'].value_counts().sort_values(ascending=True).plot(\n",
    "\n",
    "kind='barh',\n",
    "cmap='spring',\n",
    "title='City Counts',\n",
    "figsize=(10,5),\n",
    "ec='k'\n",
    ")\n",
    "plt.ylabel('City')\n",
    "plt.xlabel('Count')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: Bangalore is the best city for job placements, followed by Hyderabad, Pune, Noida, and Bangalore. Kolkata and Mumbai are the least favorable.\n",
    "# Gender\n",
    "plt.figure(figsize=(3,3))\n",
    "plt.pie(df['Gender'].value_counts().tolist(),\n",
    "labels=df['Gender'].value_counts().index,\n",
    "autopct='%1.1f%%',\n",
    "radius=1.5,\n",
    "wedgeprops={'edgecolor': 'k'},\n",
    "textprops={'fontsize': 10, 'fontweight': 'bold'},\n",
    "shadow=True,\n",
    "startangle=90,\n",
    "pctdistance=0.85)\n",
    "plt.pie(df['Gender'].value_counts().tolist(),\n",
    "colors=['white'],\n",
    "wedgeprops={'edgecolor': 'white'},\n",
    "radius=1)\n",
    "plt.title('Gender %', pad=40, size=20)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: The male population is actually larger than the female population, hence the dataset is not gender balanced.\n",
    "# 10board & 12board\n",
    "fig, ax = plt.subplots(2, 1, figsize=(10, 8), sharex=True)\n",
    "df['10board'].str.upper().value_counts().sort_values(ascending=True).plot(\n",
    "kind='barh',\n",
    "ax=ax[0],\n",
    "ec='k',\n",
    "title='10th Boards'\n",
    ")\n",
    "ax[0].set_ylabel('Board', size=15)\n",
    "df['12board'].str.upper().value_counts().sort_values(ascending=True).plot(\n",
    "kind='barh',\n",
    "ax=ax[1],\n",
    "ec='k',\n",
    "title='12th Boards'\n",
    ")\n",
    "ax[1].set_ylabel('Board', size=15)\n",
    "ax[1].set_xlabel('Count', size=15)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: For both the 10th and 12th grades, the most popular school board is CBSE.\n",
    "# CollegeTier\n",
    "plt.figure(figsize=(3,3))\n",
    "plt.pie(df['CollegeTier'].value_counts().tolist(), labels = df['CollegeTier'].\n",
    "value_counts().index,\n",
    "autopct = '%1.1f%%',\n",
    "radius = 1.75,\n",
    "wedgeprops = {'edgecolor':'k'},\n",
    "textprops = {'fontsize':9,'fontweight':'bold'},\n",
    "shadow = True,\n",
    "startangle = 90,\n",
    "pctdistance = 0.85)\n",
    "plt.pie(df['CollegeTier'].value_counts().tolist(), colors = ['white'],\n",
    "wedgeprops = {'edgecolor':'white'},\n",
    "radius = 1)\n",
    "plt.title('College Tier %',pad = 40, size = 12)\n",
    "plt.margins(0.02)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: With a percentage of 92.5, almost the entire college is in Tier 1.\n",
    "# Degree \n",
    "df['Degree'].value_counts().sort_values(ascending=True).plot(\n",
    "\n",
    "kind='barh',\n",
    "title='Degree',\n",
    "figsize=(10, 6),\n",
    "ec='k',\n",
    "alpha=0.7\n",
    ")\n",
    "plt.ylabel('Degree')\n",
    "plt.xlabel('Count')\n",
    "plt.xscale('log')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: Few students hold an M.Sc. in technology, with the majority of graduates having completed their B.Tech degrees.\n",
    "# College City Tier\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Prepare data\n",
    "college_city_tier_counts = df1['CollegeCityTier'].value_counts()\n",
    "\n",
    "# Plot pie chart\n",
    "plt.figure(figsize=(6, 6))\n",
    "plt.pie(college_city_tier_counts, labels=college_city_tier_counts.index, colors=['lightblue', 'lightgreen'],\n",
    "        autopct='%1.1f%%', startangle=90, wedgeprops={'edgecolor': 'black'}, textprops={'fontsize': 8, 'fontweight': 'bold'},\n",
    "        shadow=True, pctdistance=0.84)\n",
    "plt.title('College Tier %', pad=30, size=12)\n",
    "plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n",
    "plt.show()\n",
    "\n",
    "Observations: The majority of colleges are located in Tier 0 cities.\n",
    "# Graduation Year\n",
    "df['GraduationYear'].value_counts().sort_values(ascending=True).plot(\n",
    "\n",
    "kind='barh',\n",
    "title='Graduation Year',\n",
    "figsize=(10, 6),\n",
    "ec='k',\n",
    "alpha=0.7\n",
    ")\n",
    "plt.ylabel('Year')\n",
    "plt.xlabel('Count')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: The year 2013 saw the highest number of graduates, with 2014 and 2012 following closely after.\n",
    "Univariate visual analysis for all the categorical and numerical columns\n",
    "2) Understanding the probability and frequency distribution of each numerical column\n",
    "# TENURE\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "# Summary Plot\n",
    "plt.figure(figsize=(6, 5))\n",
    "df['Tenure'].describe()[1:].plot(alpha=0.8, marker='D', markersize=10, color='navy')\n",
    "plt.title('A Synopsis of Tenure Statistics', fontsize=14)\n",
    "plt.xlabel('Statistical Measures', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Histogram\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(df['Tenure'], ec='black', bins=np.arange(0, df['Tenure'].max() + 0.5, 0.5),\n",
    "         color='skyblue', alpha=0.7, label=f\"Skewness: {round(df['Tenure'].skew(), 2)}\", density=True)\n",
    "plt.xticks(ticks=np.arange(0, df['Tenure'].max() + 0.5, 0.5), fontsize=10)\n",
    "plt.xlabel('Experience', fontsize=12)\n",
    "plt.ylabel('Density', fontsize=12)\n",
    "plt.axvline(df['Tenure'].mean(), label=f\"Mean: {round(df['Tenure'].mean(), 2)}\", linestyle='--', color='darkgreen',\n",
    "            linewidth=2)\n",
    "plt.axvline(df['Tenure'].median(), label=f\"Median: {round(df['Tenure'].median(), 2)}\", linestyle=':', color='black',\n",
    "            linewidth=2)\n",
    "plt.axvline(df['Tenure'].mode()[0], label=f\"Mode: {round(df['Tenure'].mode()[0], 2)}\", linestyle='-.', color='red',\n",
    "            linewidth=2)\n",
    "sns.kdeplot(df['Tenure'], color='navy')\n",
    "plt.legend(fontsize=12)\n",
    "plt.show()\n",
    "\n",
    "# Box Plot\n",
    "plt.figure(figsize=(6, 5))\n",
    "sns.boxplot(df['Tenure'], color='lightcoral')\n",
    "plt.xlabel('Tenure', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# CDF\n",
    "plt.figure(figsize=(6, 5))\n",
    "x_tenure, y_tenure = cdf(df['Tenure'])\n",
    "x_sample_tenure, y_sample_tenure = cdf(np.random.normal(df['Tenure'].mean(), df['Tenure'].std(), size=len(df['Tenure'])))\n",
    "plt.plot(x_tenure, y_tenure, linestyle='None', marker='.', color='orange', alpha=0.7, label='Tenure', markersize=10)\n",
    "plt.plot(x_sample_tenure, y_sample_tenure, linestyle='None', marker='.', color='darkgreen', alpha=0.7,\n",
    "         label='Normal Distribution', markersize=10)\n",
    "plt.xlabel('Tenure', fontsize=12)\n",
    "plt.ylabel('CDF', fontsize=12)\n",
    "plt.legend(fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Observations :\n",
    "Summary Plot: The range of experience is 4 years.\n",
    "Histogram: The data is positively skewed, with a higher proportion of respondents with low tenure (50%) and an average tenure of 1.5 years. The mean, median, and mode are closely related, and the skewness (0.6) is similar to that of a normal (0).\n",
    "Box Plot: Few values with high tenure, indicating outliers.\n",
    "CDF: Tenure data does not follow a normal distribution.\n",
    "# SALARY\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "# Summary Plot\n",
    "plt.figure(figsize=(7, 5))\n",
    "df['Salary'].describe()[1:].plot(alpha=0.8,\n",
    "                                 marker='o', markersize=10, color='blue')\n",
    "\n",
    "plt.title('A Synopsis of Salary data', size=15)\n",
    "plt.xlabel('Statistical Measures', size=12)\n",
    "plt.ylabel('Salary', size=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Histogram\n",
    "bins = np.arange(0, df['Salary'].max() + 250000, 250000)\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(df['Salary'], ec='k',\n",
    "         bins=bins,\n",
    "         label=f\"Skewness : {round(df['Salary'].skew(), 2)}\",\n",
    "         alpha=0.7,\n",
    "         density=True,\n",
    "         color='orange')\n",
    "plt.xticks(bins, size=12)\n",
    "plt.yticks(size=12)\n",
    "plt.xlabel('Salary', size=15)\n",
    "plt.ylabel('Density', size=15)\n",
    "plt.axvline(df['Salary'].mean(), label=f\"Mean: {round(df['Salary'].mean(), 2)}\",\n",
    "            linestyle='--',\n",
    "            color='red', linewidth=2)\n",
    "plt.axvline(df['Salary'].median(), label=f\"Median: {round(df['Salary'].median(), 2)}\",\n",
    "            linestyle='--',\n",
    "            color='green', linewidth=2)\n",
    "plt.axvline(df['Salary'].mode()[0], label=f\"Mode: {round(df['Salary'].mode()[0], 2)}\",\n",
    "            linestyle='--',\n",
    "            color='blue', linewidth=2)\n",
    "sns.kdeplot(df['Salary'], color='purple')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Box Plot\n",
    "plt.figure(figsize=(7, 5))\n",
    "sns.boxplot(df['Salary'], color='magenta')\n",
    "plt.xlabel('Salary', size=12)\n",
    "plt.ylabel('Density', size=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# CDF\n",
    "plt.figure(figsize=(7, 5))\n",
    "x_salary, y_salary = cdf(df['Salary'])\n",
    "x_sample_salary, y_sample_salary = cdf(np.random.normal(df['Salary'].mean(), df['Salary'].std(), size=len(df['Salary'])))\n",
    "plt.plot(x_salary, y_salary, linestyle='None',\n",
    "         marker='.', color='yellow',\n",
    "         alpha=0.7, label='Salary')\n",
    "plt.plot(x_sample_salary, y_sample_salary, linestyle='None',\n",
    "         marker='.', color='green',\n",
    "         alpha=0.7, label='Normal Distribution')\n",
    "plt.xlabel('Salary', size=12)\n",
    "plt.ylabel('CDF', size=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Observations:\n",
    "Summary plot: There is significant difference in wage throughout the dataset.\n",
    "\n",
    "Histogram: The data shows strong positive skewness, with a skewness score of around 6, suggesting a deviation from the normal distribution. The metrics of central tendency (mean, median, and mode) are similar.\n",
    "\n",
    "Box Plot: The box plot shows a noteworthy concentration of data points with high wages.\n",
    "\n",
    "CDF: The CDF indicates significant skewness in the data, deviating from a normal distribution pattern.\n",
    "\n",
    "# 10th PERCENTAGE \n",
    "\n",
    "# Summary Plot\n",
    "plt.figure(figsize=(7, 5))\n",
    "df['10percentage'].describe()[1:].plot(alpha=0.8,\n",
    "                                       marker='o', markersize=10, color='blue')\n",
    "\n",
    "plt.title('A Synopsis of Statistics for 10percentage', size=15)\n",
    "plt.xlabel('Statistical Measures', size=12)\n",
    "plt.ylabel('10th Percentage', size=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Histogram\n",
    "bins = np.arange(df['10percentage'].min(), df['10percentage'].max() + df['10percentage'].std(), df['10percentage'].std() / 3)\n",
    "plt.figure(figsize=(15, 6))\n",
    "plt.hist(df['10percentage'], ec='k',\n",
    "         bins=bins,\n",
    "         label=f\"Skewness : {round(df['10percentage'].skew(), 2)}\",\n",
    "         alpha=0.7,\n",
    "         density=True,\n",
    "         color='orange')\n",
    "plt.xticks(bins, size=12)\n",
    "plt.yticks(size=12)\n",
    "plt.xlabel('10th Percentage', size=15)\n",
    "plt.ylabel('Density', size=15)\n",
    "plt.axvline(df['10percentage'].mean(), label=f\"Mean: {round(df['10percentage'].mean(), 2)}\",\n",
    "            linestyle='--',\n",
    "            color='red', linewidth=2)\n",
    "plt.axvline(df['10percentage'].median(), label=f\"Median: {round(df['10percentage'].median(), 2)}\",\n",
    "            linestyle='--',\n",
    "            color='green', linewidth=2)\n",
    "plt.axvline(df['10percentage'].mode()[0], label=f\"Mode: {round(df['10percentage'].mode()[0], 2)}\",\n",
    "            linestyle='--',\n",
    "            color='blue', linewidth=2)\n",
    "sns.kdeplot(df['10percentage'], color='purple')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Box Plot\n",
    "plt.figure(figsize=(7, 5))\n",
    "sns.boxplot(df['10percentage'], color='magenta')\n",
    "plt.xlabel('10th Percentage', size=12)\n",
    "plt.ylabel('Density', size=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# CDF\n",
    "plt.figure(figsize=(7, 5))\n",
    "x_10, y_10 = cdf(df['10percentage'])\n",
    "x_sample_10, y_sample_10 = cdf(np.random.normal(df['10percentage'].mean(), df['10percentage'].std(), size=len(df['10percentage'])))\n",
    "plt.plot(x_10, y_10, linestyle='None',\n",
    "         marker='.', color='yellow',\n",
    "         alpha=0.7, label='10th %')\n",
    "plt.plot(x_sample_10, y_sample_10, linestyle='None',\n",
    "         marker='.', color='green',\n",
    "         alpha=0.7, label='Normal Distribution')\n",
    "plt.xlabel('10th Percentage', size=12)\n",
    "plt.ylabel('CDF', size=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Observations:\n",
    "Summary plot: Approximately 50% of students obtained scores of approximately 80 percent or less.\n",
    "Histogram: The histogram shows a shortage of students with low percentages, with most falling within the 75% to 90% range. The peak frequency is around 78%, with an average score of roughly 77%.\n",
    "Box Plot: There are a few severe outliers.This is clear from the box plot.\n",
    "CDF: The data shows skewness and does not follow a normal distribution pattern.\n",
    "# 12th PERCENTAGE \n",
    "\n",
    "# Summary plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "df['12percentage'].describe()[1:].plot(marker='o', markersize=8, color='blue', alpha=0.8)\n",
    "plt.title('A Synopsis of Statistics for 12th Percentage', fontsize=14)\n",
    "plt.xlabel('Statistical Measures', fontsize=12)\n",
    "plt.ylabel('12th Percentage', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Histogram\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.histplot(df['12percentage'], bins='auto', color='green', alpha=0.7, kde=True, label=f\"Skewness: {round(df['12percentage'].skew(), 2)}\")\n",
    "plt.axvline(df['12percentage'].mean(), color='red', linestyle='--', label=f\"Mean: {round(df['12percentage'].mean(), 2)}\")\n",
    "plt.axvline(df['12percentage'].median(), color='blue', linestyle='--', label=f\"Median: {round(df['12percentage'].median(), 2)}\")\n",
    "plt.xlabel('12th Percentage', fontsize=12)\n",
    "plt.ylabel('Density', fontsize=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Box plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(x=df['12percentage'], color='purple')\n",
    "plt.xlabel('12th Percentage', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# CDF \n",
    "plt.figure(figsize=(7, 5))\n",
    "x_12, y_12 = cdf(df['12percentage'])\n",
    "x_sample_12, y_sample_12 = cdf(np.random.normal(df['12percentage'].mean(), df['12percentage'].std(), size=len(df['12percentage'])))\n",
    "plt.plot(x_12, y_12, linestyle='None',\n",
    "         marker='.', color='yellow',\n",
    "         alpha=0.7, label='12th %')\n",
    "\n",
    "plt.plot(x_sample_12, y_sample_12, linestyle='None',\n",
    "         marker='.', color='green',\n",
    "         alpha=0.7, label='Normal Distribution')\n",
    "plt.xlabel('12th Percentage', size=12)\n",
    "plt.ylabel('CDF', size=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations:\n",
    "The Summary plot depicts Approximately 50% of the pupils received grades of no more than about 78%.\n",
    "A histogram With the bulk of students scoring between 69% and 84%, the histogram shows that there are few pupils with low percentages. The average score is approximately 74%, with the greatest frequency occurring at 70%.\n",
    "The Box Plot There is only one data point shown in the box plot has a remarkably low rating.\n",
    "CDF The information deviates from the normal distributional structure.\n",
    "# COLLEGE GPA\n",
    "\n",
    "# Summary Plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "df['collegeGPA'].describe()[1:].plot(marker='o', markersize=8, color='navy', alpha=0.8)\n",
    "plt.title('Summary Statistics for College GPA', fontsize=14)\n",
    "plt.xlabel('Statistical Measures', fontsize=12)\n",
    "plt.ylabel('College GPA', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Histogram \n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.histplot(df['collegeGPA'], bins='auto', color='teal', alpha=0.7, kde=True, label=f\"Skewness: {round(df['collegeGPA'].skew(), 2)}\")\n",
    "plt.axvline(df['collegeGPA'].mean(), color='red', linestyle='--', label=f\"Mean: {round(df['collegeGPA'].mean(), 2)}\")\n",
    "plt.axvline(df['collegeGPA'].median(), color='green', linestyle='--', label=f\"Median: {round(df['collegeGPA'].median(), 2)}\")\n",
    "plt.xlabel('College GPA', fontsize=12)\n",
    "plt.ylabel('Density', fontsize=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Box Plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.boxplot(x=df['collegeGPA'], color='indigo')\n",
    "plt.xlabel('College GPA', fontsize=12)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# CDF\n",
    "\n",
    "# Calculate CDF for College GPA\n",
    "x_gpa, y_gpa = np.sort(df['collegeGPA']), np.arange(1, len(df['collegeGPA']) + 1) / len(df['collegeGPA'])\n",
    "\n",
    "# Generate a normal distribution with the same mean and standard deviation\n",
    "normal_dist = np.random.normal(df['collegeGPA'].mean(), df['collegeGPA'].std(), size=len(df['collegeGPA']))\n",
    "x_normal, y_normal = np.sort(normal_dist), np.arange(1, len(normal_dist) + 1) / len(normal_dist)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(x_gpa, y_gpa, marker='.', linestyle='none', color='orange', markersize=6, label='College GPA CDF')\n",
    "plt.plot(x_normal, y_normal, marker='.', linestyle='none', color='blue', markersize=6, label='Normal Distribution')\n",
    "plt.xlabel('College GPA', fontsize=12)\n",
    "plt.ylabel('CDF', fontsize=12)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations:\n",
    "Summary Plot: 5 percent of pupils had a GPA of about 80 percent or less.\n",
    "A histogram Most of the students got GPAs in the range of 63% to 78%. The average GPA was 74%, while the largest frequency of pupils received scores of 70%.\n",
    "The Box Plot The box plot indicates that the dataset has both low and high extreme values.\n",
    "CDF The information is thought to be sufficiently symmetrically distributed.\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to calculate CDF\n",
    "def cdf(data):\n",
    "    x = np.sort(data)\n",
    "    y = np.arange(1, len(data) + 1) / len(data)\n",
    "    return x, y\n",
    "\n",
    "# List of numerical columns\n",
    "numerical_columns = ['English', 'Logical', 'Quant', 'Domain' , 'ComputerProgramming', 'ElectronicsAndSemicon', 'ComputerScience', 'Age']\n",
    "\n",
    "# Loop through each numerical column\n",
    "for column in numerical_columns:\n",
    "    # Summary Plot\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    df[column].describe()[1:].plot(alpha=0.8, marker='D', markersize=8, color='green')\n",
    "    plt.title(f'Summary Statistics for {column}')\n",
    "    plt.xlabel('Statistical Measures')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # Histogram\n",
    "    bins = np.arange(df[column].min(), df[column].max() + df[column].std(), df[column].std() / 3)\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.hist(df[column], bins=bins, ec='k', alpha=0.7, density=True, color='blue', label=f\"Skewness: {round(df[column].skew(), 2)}\")\n",
    "    plt.xlabel(column, size=15)\n",
    "    plt.ylabel('Density', size=15)\n",
    "    plt.axvline(df[column].mean(), linestyle='--', color='red', linewidth=2, label=f\"Mean: {round(df[column].mean(), 2)}\")\n",
    "    plt.axvline(df[column].median(), linestyle=':', color='green', linewidth=2, label=f\"Median: {round(df[column].median(), 2)}\")\n",
    "    plt.axvline(df[column].mode()[0], linestyle='-.', color='purple', linewidth=2, label=f\"Mode: {round(df[column].mode()[0], 2)}\")\n",
    "    sns.kdeplot(df[column], color='orange')\n",
    "    plt.legend()\n",
    "    plt.show()\n",
    "    \n",
    "    # Box Plot\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    sns.boxplot(df[column], color='magenta')\n",
    "    plt.xlabel(column)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "    \n",
    "    # CDF Plot\n",
    "    x_data, y_data = cdf(df[column])\n",
    "    x_normal, y_normal = cdf(np.random.normal(df[column].mean(), df[column].std(), size=len(df[column])))\n",
    "    plt.figure(figsize=(6, 4))\n",
    "    plt.plot(x_data, y_data, linestyle='-', marker='.', color='blue', alpha=0.7, label='Data')\n",
    "    plt.plot(x_normal, y_normal, linestyle='-', marker='.', color='red', alpha=0.7, label='Normal Distribution')\n",
    "    plt.xlabel(column)\n",
    "    plt.ylabel('CDF')\n",
    "    plt.legend()\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Observations:\n",
    "1) English:\n",
    "Summary Plot: Half of the students scored below 500 in their English exams.\n",
    "Histogram: The bulk of the scores fell within the range of 389 to 545. The peak occurred at 475, with an average score of 502.\n",
    "Box Plot: Both lower and higher extreme values are evident from the distribution representation.\n",
    "CDF: The data follows a reasonably normal distribution pattern.\n",
    "2) Logical:\n",
    "Summary Plot: 50% of the pupils received a score of less than 500 in the rational examinations.\n",
    "Histogram: The majority of scores were between 454 and 584, with a peak of 495 and an average of 502.\n",
    "Box Plot: There are lower extreme values present, with a single noteworthy high extreme value.\n",
    "CDF Data: is very similar to a normal distributional structure.\n",
    "3) Quant :\n",
    "Summary Plot: 75% of student's logical score was less than 600.\n",
    "Histogram: Majority of the scores were in between 425-608. The maximum number of students scored 605 with an average of 513.\n",
    "Box Plot: The box plot shows the presence of both low and high extreme values.\n",
    "CDF: The data is sufficiently close to normally distributed.\n",
    "4) Computer Programming:\n",
    "Summary Plot: 50% of pupils received test results below 500.\n",
    "Histogram: Most of the scores fell between 416 and 459. The pinnacle was reached with a mean score of 452, at 455.\n",
    "Box Plot: The box graphic demonstrates how many low extreme values are present as well as high, extreme levels.\n",
    "CDF: There is no normal distribution pattern in the data.\n",
    "5) Electronics & Semiconductors:\n",
    "Summary Plot: Roughly 75% of pupils received a score below 250.\n",
    "Histogram: Most people's scores ranged from 0 to 79. The greatest quantity of pupils obtained a score of 0, with a mean of 96.\n",
    "Box Plot: The dataset's median is the same as the lowest score.\n",
    "CDF: There is no normal distribution pattern in the data.\n",
    "6) Age:\n",
    "Summary Plot: Seventy-five percent of students are younger than 26.\n",
    "histogram: Most students were in the age range of twenty-two to twenty-five. the average, About 25 is the median and mode age.\n",
    "Box Plot: In comparison to the other data points, the box plot shows that there are four students with extremely high ages and one with an extremely low age.\n",
    "CDF: The age distribution data is not normally distributed.\n",
    "Step-4: Bivariate visual analysis for all the categorical and numerical columns\n",
    "Salary Vs Designation\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(2, 1, figsize=(10, 8), sharex=True)\n",
    "\n",
    "# Plot with outliers\n",
    "sns.barplot(x='Salary', y='Designation', data=df1, palette='viridis', capsize=0.1, ax=ax[0])\n",
    "ax[0].axvline(df['Salary'].mean(), color='red', linestyle=':', linewidth=2, label='Overall Avg. Salary')\n",
    "ax[0].set_title('Average Salary for Each Designation (with Outliers)')\n",
    "ax[0].legend()\n",
    "ax[0].set_xlabel('')\n",
    "ax[0].tick_params(axis='both', labelsize=12)\n",
    "\n",
    "# Plot without outliers\n",
    "sns.barplot(x='Salary', y='Designation', data=df1, palette='viridis', capsize=0.1, ax=ax[1])\n",
    "ax[1].axvline(df1['Salary'].mean(), color='red', linestyle=':', linewidth=2, label='Overall Avg. Salary')\n",
    "ax[1].set_title('Average Salary for Each Designation (without Outliers)')\n",
    "ax[1].legend()\n",
    "ax[1].set_xlabel('Salary', fontsize=12)\n",
    "ax[1].tick_params(axis='both', labelsize=12)\n",
    "\n",
    "# Adjust layout and display\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Obsevations:\n",
    "The maximum pay for each Designation is displayed in a bar plot. The best paid individual is a senior software engineer, yet their pay also has the biggest standard deviation.\n",
    "\n",
    "Only two job titles—software developer and technical support engineer—have salaries that are below average.\n",
    "\n",
    "Salary Vs Gender\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(2, 1, figsize=(10, 6), sharex=True)\n",
    "\n",
    "# Plot with outliers\n",
    "sns.barplot(x='Salary', y='Gender', data=df, palette='YlGn', capsize=0.1, ax=ax[0])\n",
    "ax[0].axvline(df1['Salary'].mean(), color='black', linestyle=':', linewidth=2, label='Overall Avg. Salary')\n",
    "ax[0].set_title('Average Salary per Gender (with Outliers)')\n",
    "ax[0].legend()\n",
    "ax[0].set_xlabel('')\n",
    "ax[0].tick_params(axis='both', labelsize=12)\n",
    "\n",
    "# Plot without outliers\n",
    "sns.barplot(x='Salary', y='Gender', data=df1, palette='RdPu', capsize=0.1, ax=ax[1])\n",
    "ax[1].axvline(df1['Salary'].mean(), color='black', linestyle=':', linewidth=2, label='Overall Avg. Salary')\n",
    "ax[1].set_title('Average Salary per Gender (without Outliers)')\n",
    "ax[1].legend()\n",
    "ax[1].set_xlabel('Salary', fontsize=12)\n",
    "ax[1].tick_params(axis='both', labelsize=12)\n",
    "\n",
    "# Adjust layout and display\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations:\n",
    "The roughly equal average compensation for men and women suggests that there was no pay discrimination based on gender. It is also conceivable to argue that female salaries are lower than the national average.\n",
    "\n",
    "Salary Vs 10th Percentage\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(1, 2, figsize=(10, 6), sharex=True, sharey=True)\n",
    "\n",
    "# Plot with outliers\n",
    "ax[0].scatter(df['Salary'], df['10percentage'], ec='black', color='red', alpha=0.7, s=60,\n",
    "               label=f\"Correlation: {round(df[['Salary','10percentage']].corr().iloc[1,0],2)}\")\n",
    "ax[0].set_ylabel('10th Percentage', fontsize=12)\n",
    "ax[0].set_title('With Outliers', fontsize=12)\n",
    "ax[0].legend(fontsize=10)\n",
    "\n",
    "# Plot without outliers\n",
    "ax[1].scatter(df['Salary'], df['10percentage'], ec='black', color='green', alpha=0.5, s=60,\n",
    "               label=f\"Correlation: {round(df1[['Salary','10percentage']].corr().iloc[1,0],2)}\")\n",
    "ax[1].set_title('Without Outliers', fontsize=12)\n",
    "ax[1].legend(fontsize=10)\n",
    "\n",
    "# Set common title\n",
    "fig.suptitle('Correlation between Salary & 10th Score', fontsize=14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "Observations: There isn't any relationship between salary and 10th grade results.\n",
    "Salary Vs 12 th Percentage\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(1, 2, figsize=(10, 6), sharex=True, sharey=True)\n",
    "\n",
    "# Plot with outliers\n",
    "ax[0].scatter(df['Salary'], df['12percentage'], ec='black', color='pink', alpha=0.7, s=70,\n",
    "              label=f\"Correlation: {round(df[['Salary','12percentage']].corr().iloc[1,0],2)}\")\n",
    "ax[0].set_ylabel('12th Percentage', fontsize=12)\n",
    "ax[0].set_title('With Outliers', fontsize=12)\n",
    "ax[0].legend(fontsize=10)\n",
    "\n",
    "# Plot without outliers\n",
    "ax[1].scatter(df1['Salary'], df1['12percentage'], ec='black', color='skyblue', alpha=0.5, s=70,\n",
    "              label=f\"Correlation: {round(df1[['Salary','12percentage']].corr().iloc[1,0],2)}\")\n",
    "ax[1].set_title('Without Outliers', fontsize=12)\n",
    "ax[1].legend(fontsize=10)\n",
    "\n",
    "# Set common title\n",
    "fig.suptitle('Correlation between Salary & 12th Score', fontsize=14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "Observations: There isn't any relationship between salary and 12th grade results.\n",
    "Salary Vs College GPA\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(1, 2, figsize=(10, 6), sharex=True, sharey=True)\n",
    "\n",
    "# Plot with outliers\n",
    "ax[0].scatter(df['Salary'], df['collegeGPA'], ec='black', color='brown', alpha=0.7, s=70,\n",
    "              label=f\"Correlation: {round(df[['Salary','collegeGPA']].corr().iloc[1,0],2)}\")\n",
    "ax[0].set_ylabel('GPA', fontsize=12)\n",
    "ax[0].set_title('With Outliers', fontsize=12)\n",
    "ax[0].legend(fontsize=10)\n",
    "\n",
    "# Plot without outliers\n",
    "ax[1].scatter(df1['Salary'], df1['collegeGPA'], ec='black', color='slateblue', alpha=0.5, s=70,\n",
    "              label=f\"Correlation: {round(df1[['Salary','collegeGPA']].corr().iloc[1,0],2)}\")\n",
    "ax[1].set_title('Without Outliers', fontsize=12)\n",
    "ax[1].legend(fontsize=10)\n",
    "\n",
    "# Set common title\n",
    "fig.suptitle('Correlation between Salary & College GPA', fontsize=14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "Observations: There isn't any relationship between salary and college GPA\n",
    "Salary Vs Age\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(2, 1, figsize=(8, 10), sharex=True)\n",
    "\n",
    "# Scatter plot with outliers\n",
    "ax[0].scatter(df['Age'], df['Salary'], ec='black', color='#ff5591', alpha=0.6,\n",
    "              label=f\"Correlation : {round(df[['Age','Salary']].corr().iloc[1,0],2)}\")\n",
    "ax[0].legend(fontsize=10)\n",
    "ax[0].set_ylabel('Salary', fontsize=12)\n",
    "ax[0].set_title('With Outliers', size=12)\n",
    "\n",
    "# Scatter plot without outliers\n",
    "ax[1].scatter(df1['Age'], df1['Salary'], ec='black', color='#694237', alpha=0.6,\n",
    "              label=f\"Correlation : {round(df1[['Age','Salary']].corr().iloc[1,0],2)}\")\n",
    "ax[1].legend(fontsize=10)\n",
    "ax[1].set_ylabel('Salary', fontsize=12)\n",
    "ax[1].set_xlabel('Age', fontsize=12)\n",
    "ax[1].set_title('Without Outliers', size=12)\n",
    "\n",
    "# Set common title\n",
    "fig.suptitle('Correlation between Salary and Age', size=14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "Observations: It is clear that there is no correlation between age and wage after the outliers are removed.\n",
    "Salary Vs Tenure\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(2, 1, figsize=(8, 8), sharex=True)\n",
    "\n",
    "# Scatter plot with outliers\n",
    "ax[0].scatter(df['Tenure'], df['Salary'], ec='black', color='#ff2391', alpha=0.6,\n",
    "              label=f\"Correlation : {round(df[['Tenure','Salary']].corr().iloc[1,0],2)}\")\n",
    "ax[0].legend(fontsize=10)\n",
    "ax[0].set_ylabel('Salary', fontsize=12)\n",
    "ax[0].set_title('With Outliers', size=12)\n",
    "\n",
    "# Scatter plot without outliers\n",
    "ax[1].scatter(df1['Tenure'], df1['Salary'], ec='black', color='#785567', alpha=0.6,\n",
    "              label=f\"Correlation : {round(df1[['Tenure','Salary']].corr().iloc[1,0],2)}\")\n",
    "ax[1].legend(fontsize=10)\n",
    "ax[1].set_ylabel('Salary', fontsize=12)\n",
    "ax[1].set_xlabel('Tenure', fontsize=12)\n",
    "ax[1].set_title('Without Outliers', size=12)\n",
    "\n",
    "# Set common title\n",
    "fig.suptitle('Correlation between Salary and Tenure', size=14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "Observations: Once the outliers are eliminated, a positive correlation of 0.60 indicates that compensation increases by approximately 50% with tenure.\n",
    "Salary Vs English, Quants, Logical\n",
    "# Define the columns and corresponding colors\n",
    "columns = ['English', 'Quant', 'Logical']\n",
    "colors = ['purple', 'orange', 'cyan']\n",
    "\n",
    "# Create subplots\n",
    "fig, ax = plt.subplots(3, 2, figsize=(10, 12), sharey=True)\n",
    "\n",
    "for i, col in enumerate(columns):\n",
    "    # Scatter plot with outliers\n",
    "    ax[i, 0].scatter(df[col], df['Salary'], ec='black', color=colors[i], alpha=0.5,\n",
    "                     label=f\"Correlation: {round(df[[col,'Salary']].corr().iloc[1,0], 2)}\")\n",
    "    ax[i, 0].set_ylabel('Salary')\n",
    "    ax[i, 0].set_xlabel(f'{col} Scores')\n",
    "    ax[i, 0].set_title('With Outliers')\n",
    "    ax[i, 0].legend()\n",
    "\n",
    "    # Scatter plot without outliers\n",
    "    ax[i, 1].scatter(df1[col], df1['Salary'], ec='black', color=colors[i], alpha=0.5,\n",
    "                     label=f\"Correlation: {round(df1[[col,'Salary']].corr().iloc[1,0], 2)}\")\n",
    "    ax[i, 1].set_xlabel(f'{col} Scores')\n",
    "    ax[i, 1].set_title('Without Outliers')\n",
    "    ax[i, 1].legend()\n",
    "\n",
    "# Adjust layout\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: The scatter plots above provide sufficient proof that none of the scores above had an impact on salary.\n",
    "Gender Vs Specialization\n",
    "# Create a horizontal bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.countplot(y='Specialization', hue='Gender', data=df1, palette='Set2', edgecolor='black')\n",
    "plt.xlabel('Count', fontsize=12)\n",
    "plt.ylabel('Specialization', fontsize=12)\n",
    "plt.title('Gender Distribution Across Specializations', fontsize=14)\n",
    "plt.legend(title='Gender')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: In every specialization, the proportion of men is over twice that of women. Furthermore, very few women chose careers in electronics and mechanics.\n",
    "Salary Vs Job City\n",
    "# Calculate the average salary per JobCity using pivot_table\n",
    "avg_salary_per_city = df1.pivot_table(index='JobCity', values='Salary', aggfunc='mean')\n",
    "\n",
    "# Plotting the horizontal bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Salary', y=avg_salary_per_city.index, data=avg_salary_per_city,\n",
    "            palette='Greens_d', edgecolor='k', alpha=0.6)\n",
    "plt.xlabel('Average Salary', fontsize=12)\n",
    "plt.ylabel('Job City', fontsize=12)\n",
    "plt.title('Average Salary per Job City', fontsize=14)\n",
    "\n",
    "# Adding vertical lines for mean and mean ± std\n",
    "mean_salary = df1['Salary'].mean()\n",
    "std_salary = df1['Salary'].std()\n",
    "plt.axvline(mean_salary, color='k', linestyle='-', label='Mean')\n",
    "plt.axvline(mean_salary - std_salary, color='red', linestyle=':', label='Mean - Std')\n",
    "plt.axvline(mean_salary + std_salary, color='red', linestyle=':', label='Mean + Std')\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Salary Vs College Tier\n",
    "# Calculate the average salary per CollegeTier using pivot_table\n",
    "avg_salary_per_tier = df1.pivot_table(index='CollegeTier', values='Salary', aggfunc='mean')\n",
    "\n",
    "# Plotting the horizontal bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Salary', y=avg_salary_per_tier.index, data=avg_salary_per_tier,\n",
    "            palette='Spectral', alpha=0.6, edgecolor='k')\n",
    "plt.xlabel('Average Salary', fontsize=12)\n",
    "plt.ylabel('College Tier', fontsize=12)\n",
    "plt.title('Average Salary per College Tier', fontsize=14)\n",
    "\n",
    "# Adding vertical lines for mean and mean ± std\n",
    "mean_salary = df1['Salary'].mean()\n",
    "std_salary = df1['Salary'].std()\n",
    "plt.axvline(mean_salary, color='k', linestyle='-', label='Mean')\n",
    "plt.axvline(mean_salary - std_salary, color='red', linestyle=':', label='Mean - Std')\n",
    "plt.axvline(mean_salary + std_salary, color='red', linestyle=':', label='Mean + Std')\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: When comparing institutions in Tier 1 to Tier 2, Tier 1 colleges provide higher salaries.\n",
    "Tier 2 colleges pay less than the national average for tuition and fees.\n",
    "Salary Vs College City Tier\n",
    "# Calculate the average salary per CollegeCityTier using pivot_table\n",
    "avg_salary_per_city_tier = df1.pivot_table(index='CollegeCityTier', values='Salary', aggfunc='mean')\n",
    "\n",
    "# Plotting the horizontal bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='Salary', y=avg_salary_per_city_tier.index, data=avg_salary_per_city_tier,\n",
    "            palette='Blues_d', alpha=0.6, edgecolor='k')\n",
    "plt.xlabel('Average Salary', fontsize=12)\n",
    "plt.ylabel('College City Tier', fontsize=12)\n",
    "plt.title('Average Salary per College City Tier', fontsize=14)\n",
    "\n",
    "# Adding vertical lines for mean and mean ± std\n",
    "mean_salary = df1['Salary'].mean()\n",
    "std_salary = df1['Salary'].std()\n",
    "plt.axvline(mean_salary, color='k', linestyle='-', label='Mean')\n",
    "plt.axvline(mean_salary - std_salary, color='red', linestyle=':', label='Mean - Std')\n",
    "plt.axvline(mean_salary + std_salary, color='red', linestyle=':', label='Mean + Std')\n",
    "\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "Observations: Students in Tier 1 and Tier 2 cities receive nearly identical pay\n",
    "Research Questions\n",
    "Q1) Times of India article dated Jan 18, 2019 states that “After doing your Computer Science Engineering if you take up jobs as a Programming Analyst, Software Engineer, Hardware Engineer and Associate Engineer you can earn up to 2.5-3 lakhs as a fresh graduate.” Test this claim with the data given to you.\n",
    "Earning Potential After Computer Science Engineering:\n",
    "designations = df['Designation'].value_counts().sort_index()\n",
    "pd.set_option('display.max_rows', None)\n",
    "print(designations)\n",
    "java software engineer         108\n",
    "other                         2205\n",
    "programmer analyst             137\n",
    "project engineer                73\n",
    "senior software engineer        71\n",
    "software developer             258\n",
    "software engineer              525\n",
    "software test engineer          98\n",
    "system engineer                201\n",
    "systems engineer               116\n",
    "technical support engineer      72\n",
    "Name: Designation, dtype: int64\n",
    "df['Designation'] = df['Designation'].replace(['programmer analyst trainee', 'programmer analyst'], 'programmer analyst')\n",
    "df['Designation'] = df['Designation'].replace(['software eng', 'software engg', 'software engineer', 'software engineere', 'software enginner'], 'software engineer')\n",
    "df3 = df[(df[\"Designation\"].isin([\"programmer analyst\", \"software engineer\", \"hardware engineer\", \"associate engineer\"])) &\n",
    "        (df[\"Specialization\"].isin([\"computer science & engineering\", \"computer engineering\"]))]\n",
    "fig, ax = plt.subplots(figsize=(10, 4))\n",
    "sns.barplot(x='Salary', y='Designation',\n",
    "            data=df3,\n",
    "            capsize=0.1,\n",
    "            width=0.3,\n",
    "            ax=ax)\n",
    "\n",
    "ax.axvline(df3['Salary'].mean(), color='k',\n",
    "           linestyle=':',\n",
    "           linewidth=2, label='Overall\\nAvg. Salary')\n",
    "\n",
    "ax.set_title('Avg Salary for Each Designation after pursuing Computer Science Engineering')\n",
    "ax.legend(loc='upper right', bbox_to_anchor=(1.4, 1))\n",
    "ax.set_xlabel('')\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "C:\\Users\\hp\\AppData\\Local\\Temp\\ipykernel_8024\\3695271324.py:15: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
    "  ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n",
    "\n",
    "import random\n",
    "n = 40\n",
    "salary_random = random.sample(df3['Salary'].tolist(),n)\n",
    "print(salary_random)\n",
    "[275000.0, 370000.0, 500000.0, 350000.0, 350000.0, 300000.0, 360000.0, 350000.0, 265000.0, 360000.0, 240000.0, 450000.0, 700000.0, 400000.0, 455000.0, 475000.0, 240000.0, 390000.0, 335000.0, 390000.0, 930000.0, 600000.0, 110000.0, 240000.0, 110000.0, 490000.0, 300000.0, 400000.0, 340000.0, 200000.0, 120000.0, 180000.0, 300000.0, 335000.0, 330000.0, 305000.0, 400000.0, 620000.0, 400000.0, 350000.0]\n",
    "def t_score(sample_size, sample_mean, pop_mean, sample_std):\n",
    "\n",
    " numerator = sample_mean - pop_mean\n",
    " denomenator = sample_std / sample_size**0.5\n",
    " return numerator / denomenator\n",
    "from scipy.stats import t,norm\n",
    "import statistics\n",
    "print('Sample Mean: ', statistics.mean(salary_random))\n",
    "print('Sample Standard Deviation: ', statistics.stdev(salary_random))\n",
    "Sample Mean:  365375.0\n",
    "Sample Standard Deviation:  156608.23037284095\n",
    "sample_size = 40\n",
    "sample_mean = statistics.mean(salary_random)\n",
    "pop_mean = 275000\n",
    "sample_std = statistics.stdev(salary_random)\n",
    "t_value = t_score(sample_size, sample_mean, pop_mean, sample_std)\n",
    "print(t_value)\n",
    "3.649755097255466\n",
    "confidence_level = 0.95\n",
    "alpha = 1 - confidence_level\n",
    "t_critical = t.ppf(1 - alpha/2, df = 99)\n",
    "print(t_critical)\n",
    "1.9842169515086827\n",
    "One sample T-test Visualization\n",
    "x_min = -200000\n",
    "x_max = 800000\n",
    "mean = pop_mean\n",
    "std = sample_std\n",
    "x = np.linspace(x_min, x_max, 100)\n",
    "y = norm.pdf(x, mean, std)\n",
    "plt.xlim(x_min, x_max)\n",
    "plt.plot(x, y)\n",
    "t_critical_left = pop_mean + (-t_critical * std)\n",
    "t_critical_right = pop_mean + (t_critical * std)\n",
    "x1 = np.linspace(x_min, t_critical_left, 100)\n",
    "y1 = norm.pdf(x1, mean, std)\n",
    "plt.fill_between(x1, y1, color='orange')\n",
    "x2 = np.linspace(t_critical_right, x_max, 100)\n",
    "y2 = norm.pdf(x2, mean, std)\n",
    "plt.fill_between(x2, y2, color='orange')\n",
    "plt.scatter(sample_mean, 0)\n",
    "plt.annotate(\"x_bar\", (sample_mean, 0.7))\n",
    "Text(365375.0, 0.7, 'x_bar')\n",
    "\n",
    "if(t_value < t_critical):\n",
    "\n",
    " print(\"There is not enough evidence to reject the Null Hypothesis\")\n",
    "else:\n",
    " print(\"There is sufficent evidence to reject the Null Hypothesis\")\n",
    "There is sufficent evidence to reject the Null Hypothesis\n",
    "p_value = 2 * (1.0 - norm.cdf(np.abs(t_value)))\n",
    "print(\"p_value = \", p_value)\n",
    "if(p_value > alpha):\n",
    " print(\"There is not enough evidence to reject the Null Hypothesis\")\n",
    "else:\n",
    " print(\"There is sufficent evidence to reject the Null Hypothesis\")\n",
    "p_value =  0.0002624904491679292\n",
    "There is sufficent evidence to reject the Null Hypothesis\n",
    "Observations:\n",
    "The hypothesis testing revealed that the claim is false.\n",
    "The Null Hypothesis fails in this claim.\n",
    "The t_critical and probability value (p_value) claim it is incorrect.\n",
    "job_group = df3.groupby('Designation')\n",
    "job_salary_mean = job_group['Salary'].mean()\n",
    "job_salary_std = job_group['Salary'].std()\n",
    "\n",
    "print(\"Mean salaries for different job roles:\")\n",
    "print(job_salary_mean)\n",
    "print(\"\\nStandard deviation of salaries for different job roles:\")\n",
    "print(job_salary_std)\n",
    "Mean salaries for different job roles:\n",
    "Designation\n",
    "programmer analyst    347596.153846\n",
    "software engineer     354768.907563\n",
    "Name: Salary, dtype: float64\n",
    "\n",
    "Standard deviation of salaries for different job roles:\n",
    "Designation\n",
    "programmer analyst     57218.966969\n",
    "software engineer     149254.296773\n",
    "Name: Salary, dtype: float64\n",
    "from scipy.stats import ttest_1samp\n",
    "\n",
    "# Define the job titles and corresponding salaries\n",
    "job_salaries = {\n",
    "    \"programmer analyst\": df3.loc[df3['Designation'] == 'programmer analyst', 'Salary'].values,\n",
    "    \"software engineer\": df3.loc[df3['Designation'] == 'software engineer', 'Salary'].values,\n",
    "    \"hardware engineer\": df3.loc[df3['Designation'] == 'hardware engineer', 'Salary'].values,\n",
    "    \"associate engineer\": df3.loc[df3['Designation'] == 'associate engineer', 'Salary'].values\n",
    "}\n",
    "\n",
    "# Define the expected salary range\n",
    "expected_lower_bound = 250000\n",
    "\n",
    "# Perform one-sample t-test for each job title's salary\n",
    "for job, salaries in job_salaries.items():\n",
    "    t_stat, p_val = ttest_1samp(salaries, expected_lower_bound, alternative='greater')\n",
    "    print(f\"One-sample t-test for {job}:\")\n",
    "    print(f\" t_statistic: {t_stat:.2f}\")\n",
    "    print(f\" p_value: {p_val:.5e}\")\n",
    "    if p_val < 0.05:\n",
    "        print(\" Result: There is sufficient evidence to reject the Null Hypothesis\\n\")\n",
    "    else:\n",
    "        print(\" Result: There is not enough evidence to reject the Null Hypothesis\\n\")\n",
    "One-sample t-test for programmer analyst:\n",
    " t_statistic: 12.30\n",
    " p_value: 3.51934e-17\n",
    " Result: There is sufficient evidence to reject the Null Hypothesis\n",
    "\n",
    "One-sample t-test for software engineer:\n",
    " t_statistic: 10.83\n",
    " p_value: 9.14243e-23\n",
    " Result: There is sufficient evidence to reject the Null Hypothesis\n",
    "\n",
    "One-sample t-test for hardware engineer:\n",
    " t_statistic: nan\n",
    " p_value: nan\n",
    " Result: There is not enough evidence to reject the Null Hypothesis\n",
    "\n",
    "One-sample t-test for associate engineer:\n",
    " t_statistic: nan\n",
    " p_value: nan\n",
    " Result: There is not enough evidence to reject the Null Hypothesis\n",
    "\n",
    "Observations:\n",
    "**Programmer Analyst and Software Engineer Salaries: Both Programmer Analyst and Software Engineer positions show significantly higher salaries compared to the expected lower bound of the salary range (2.5-3 lakhs). The t-statistics for both positions are high (12.30 for Programmer Analyst and 10.83 for Software Engineer), indicating a substantial difference between the sample means and the expected value. Additionally, the p-values are extremely low (close to 0), providing strong evidence to reject the null hypothesis, suggesting that these positions indeed offer salaries higher than the expected lower bound.\n",
    "\n",
    "**Hardware Engineer and Associate Engineer Salaries: For Hardware Engineer and Associate Engineer positions, the t-statistics are reported as 'nan' (not a number), and the p-values are also 'nan'. This indicates that there might be insufficient data or variation in the sample salaries for these positions, leading to inconclusive results. Therefore, we cannot confidently reject the null hypothesis for these positions based on the available data.\n",
    "\n",
    "General Observation: Overall, the results suggest that Programmer Analyst and Software Engineer positions tend to offer salaries significantly higher than the lower bound of the expected salary range mentioned in the Times of India article. However, the analysis does not provide conclusive evidence regarding Hardware Engineer and Associate Engineer positions due to insufficient data or variability in salaries. Further investigation or data collection may be necessary to draw definitive conclusions for these positions.\n",
    "\n",
    "Q2) Is there a relationship between gender and specialization? (i.e. Does the preference of Specialisation depend on the Gender?)\n",
    "from scipy.stats import chi2\n",
    "from scipy.stats import chi2_contingency\n",
    "x = np.linspace(0, 100, 100)\n",
    "y = chi2.pdf(x, df = 6)\n",
    "plt.plot(x, y)\n",
    "[<matplotlib.lines.Line2D at 0x1a528c7d9f0>]\n",
    "\n",
    "pd.crosstab(index=df[\"Gender\"], columns=df[\"Specialization\"])\n",
    "Specialization\tcomputer application\tcomputer engineering\tcomputer science & engineering\telectrical engineering\telectronics & telecommunications\telectronics and communication engineering\telectronics and electrical engineering\tinformation technology\tmechanical engineering\tother\n",
    "Gender\t\t\t\t\t\t\t\t\t\t\n",
    "Female\t55\t169\t178\t17\t27\t209\t32\t172\t10\t63\n",
    "Male\t177\t413\t536\t62\t92\t647\t153\t477\t184\t191\n",
    "To ascertain if there's a difference in specialization preferences between men and women, we can employ the chi-square test. This test requires that all observed frequencies are no less than 5. Consequently, we should exclude the \"Other\" specialty.\n",
    "\n",
    "• We will conduct the test at a significance level of 0.05.\n",
    "\n",
    "from scipy.stats import chi2_contingency\n",
    "\n",
    "gen_spec_df = df[df['Specialization'] != 'Other']\n",
    "\n",
    "cont_tab = pd.crosstab(index=gen_spec_df['Gender'], columns=gen_spec_df['Specialization'])\n",
    "\n",
    "chi2 = chi2_contingency(cont_tab, correction=False)\n",
    "print(\"statistic:\", chi2.statistic)\n",
    "print(\"p-value:\", chi2.pvalue)\n",
    "statistic: 53.34246348642497\n",
    "p-value: 2.516819221844843e-08\n",
    "The p-value of the statistic is greater than the significance level, indicating that the variables are independent. Hence, there's no association between gender and specialization.\n",
    "\n",
    "df.groupby('Gender')['Salary'].describe()\n",
    "count\tmean\tstd\tmin\t25%\t50%\t75%\tmax\n",
    "Gender\t\t\t\t\t\t\t\t\n",
    "Female\t932.0\t295783.261803\t190709.789080\t35000.0\t200000.0\t300000.0\t360000.0\t3500000.0\n",
    "Male\t2932.0\t313707.025921\t218881.020584\t35000.0\t180000.0\t300000.0\t380000.0\t4000000.0\n",
    "At first glance, it would appear that men and women earn the same amount of money.\n",
    "\n",
    "Given that the salary variable is not normally distributed, a non-parametric test should be used to check the hypothesis that men and women earn equal amounts of money.\n",
    "\n",
    "The test's significance level will be set at 0.05.\n",
    "\n",
    "from scipy.stats import mannwhitneyu\n",
    "\n",
    "fem_sal = df[df['Gender'] == 'f']['Salary mal_sal = df[df['Gender'] == 'm']['Salary']\n",
    "\n",
    "u_stat, p_value = mannwhitneyu(fem_sal, mal_sal, alternative='less') print(\"U-statistic:\", u_stat)\n",
    "\n",
    "print(\"p-value:\", p_value)\n",
    "U-statistic: 1400518.5\n",
    "\n",
    "p-value: 0.03969567110195918\n",
    "\n",
    "• Surprisingly, there is a significant difference between men's and women's incomes. Women earn slightly less than men.\n",
    "\n",
    "Conclusion:\n",
    "Based on the observations from the univariate and bivariate analyses, as well as the dataset description and research question conclusions, the following insights can be drawn:\n",
    "\n",
    "Dataset Description:\n",
    "-The dataset contains various features related to individuals' educational backgrounds, skills, and salaries. -There are observations related to gender, age, educational qualifications, specialization, and job-related details such as -salary, designation, and job city.\n",
    "\n",
    "Univariate and Bivariate Observations:\n",
    "-The most popular designations are \"software engineer,\" \"system engineer,\" and \"software developer.\" -Bangalore is the top city for job placements, while Kolkata and Mumbai are less favorable. -There are more males than females in the dataset, indicating an imbalance. -CBSE is the most popular board for both 10th and 12th grades. -Most colleges are in Tier 1 cities, and the majority offer B.Tech degrees. -The dataset contains graduates from various years, with 2013 having the highest number of graduates. -Salary distribution varies across different designations and job titles. -There is no significant relationship between salary and 10th or 12th-grade scores. -Age does not have a strong correlation with salary, but tenure does. -Gender distribution varies across specializations. -Salaries differ between Tier 1 and Tier 2 colleges. -There's no significant difference in salaries between Tier 1 and Tier 2 cities.\n",
    "\n",
    "Research Questions:\n",
    "Q1: Testing Times of India Claim: The claim made by the Times of India regarding salaries of fresh graduates in certain roles is partially supported by the data. Salaries for Programmer Analyst and Software Engineer positions exceed the claimed range significantly. However, for Hardware Engineer and Associate Engineer positions, the data is inconclusive due to insufficient variability.\n",
    "\n",
    "Q2: Relationship between Gender and Specialization: There is a significant difference in salaries between genders, with women earning slightly less than men. The proportion of men is higher across most specializations, indicating gender preference or bias in career choices. Conclusion:\n",
    "\n",
    "Overall, the dataset provides valuable insights into the factors influencing salaries and career choices among graduates. Further analysis and investigation, especially regarding gender pay gaps and salary variations across different roles, could provide deeper insights and help address issues of inequality and bias in the job market.\n",
    "\n",
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
